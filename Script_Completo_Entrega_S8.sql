/* 
=========================================================================
   PROYECTO FINAL – MiniMarket “Doña Marta”
   Asignatura: Base de Datos – PRY2204
   Alumno: Gustavo Domínguez Castillo
   Fecha: Octubre 2025
   Institución: DUOC UC
   Descripción:
     Este script contiene la implementación completa de los casos 1 al 4
     solicitados en la actividad, organizados en bloques ejecutables:
       - Caso 1: Creación de tablas (DDL)
       - Caso 2: Restricciones y reglas de negocio
       - Caso 3: Poblamiento de datos (DML)
       - Caso 4: Consultas de recuperación de datos (SELECT)
========================================================================= 
*/


-- Script de creación de tablas DLL (CASO 1)
-------------------------------------------------

-- REGION
CREATE TABLE REGION (
  ID_REGION NUMBER(4) GENERATED BY DEFAULT AS IDENTITY,
  NOM_REGION VARCHAR2(255) NOT NULL,
  CONSTRAINT PK_REGION PRIMARY KEY (ID_REGION)
);

-- COMUNA
CREATE TABLE COMUNA (
  ID_COMUNA NUMBER(4) GENERATED BY DEFAULT AS IDENTITY,
  NOM_COMUNA VARCHAR2(100) NOT NULL,
  COD_REGION NUMBER(4),
  CONSTRAINT PK_COMUNA PRIMARY KEY (ID_COMUNA),
  CONSTRAINT FK_COMUNA_REGION FOREIGN KEY (COD_REGION) REFERENCES REGION(ID_REGION)
);

-- PROVEEDOR
CREATE TABLE PROVEEDOR (
  ID_PROVEEDOR NUMBER(5) GENERATED BY DEFAULT AS IDENTITY,
  NOMBRE_PROVEEDOR VARCHAR2(150) NOT NULL,
  RUT_PROVEEDOR VARCHAR2(10),
  TELEFONO VARCHAR2(10),
  EMAIL VARCHAR2(200),
  DIRECCION VARCHAR2(200),
  COD_COMUNA NUMBER(4),
  CONSTRAINT PK_PROVEEDOR PRIMARY KEY (ID_PROVEEDOR),
  CONSTRAINT FK_PROVEEDOR_COMUNA FOREIGN KEY (COD_COMUNA) REFERENCES COMUNA(ID_COMUNA)
);

-- MARCA
CREATE TABLE MARCA (
  ID_MARCA NUMBER(3) GENERATED BY DEFAULT AS IDENTITY,
  NOMBRE_MARCA VARCHAR2(25) NOT NULL,
  CONSTRAINT PK_MARCA PRIMARY KEY (ID_MARCA)
);

-- CATEGORIA
CREATE TABLE CATEGORIA (
  ID_CATEGORIA NUMBER(3) GENERATED BY DEFAULT AS IDENTITY,
  NOMBRE_CATEGORIA VARCHAR2(255) NOT NULL,
  CONSTRAINT PK_CATEGORIA PRIMARY KEY (ID_CATEGORIA)
);

-- AFP (considerando condicion que empieza en 210 e incrementa en 6)
CREATE TABLE AFP (
  ID_AFP NUMBER(5) GENERATED BY DEFAULT AS IDENTITY (START WITH 210 INCREMENT BY 6),
  NOM_AFP VARCHAR2(255) NOT NULL,
  CONSTRAINT PK_AFP PRIMARY KEY (ID_AFP)
);

-- SALUD
CREATE TABLE SALUD (
  ID_SALUD NUMBER(4) NOT NULL,
  NOM_SALUD VARCHAR2(40) NOT NULL,
  CONSTRAINT PK_SALUD PRIMARY KEY (ID_SALUD)
);

-- MEDIO_PAGO
CREATE TABLE MEDIO_PAGO (
  ID_MPAGO NUMBER(3) NOT NULL,
  NOMBRE_MPAGO VARCHAR2(50) NOT NULL,
  CONSTRAINT PK_MPAGO PRIMARY KEY (ID_MPAGO)
);

-- EMPLEADO
CREATE TABLE EMPLEADO (
  ID_EMPLEADO NUMBER(4) NOT NULL,
  RUT_EMPLEADO VARCHAR2(10),
  NOMBRE_EMPLEADO VARCHAR2(25),
  APELLIDO_PATERNO VARCHAR2(25),
  APELLIDO_MATERNO VARCHAR2(25),
  FECHA_CONTRATACION DATE,
  SUELDO_BASE NUMBER(10),
  BONO_JEFATURA NUMBER(10),
  ACTIVO CHAR(1),
  TIPO_EMPLEADO VARCHAR2(25),
  COD_EMPLEADO NUMBER(4),     -- jefe directo
  COD_SALUD NUMBER(4),
  COD_AFP NUMBER(5),
  CONSTRAINT PK_EMPLEADO PRIMARY KEY (ID_EMPLEADO),
  CONSTRAINT FK_EMPLEADO_SALUD FOREIGN KEY (COD_SALUD) REFERENCES SALUD(ID_SALUD),
  CONSTRAINT FK_EMPLEADO_AFP FOREIGN KEY (COD_AFP) REFERENCES AFP(ID_AFP),
  CONSTRAINT FK_EMPLEADO_JEFE FOREIGN KEY (COD_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO)
);

-- ADMINISTRATIVO (subtipo de EMPLEADO)
CREATE TABLE ADMINISTRATIVO (
  ID_EMPLEADO NUMBER(4) PRIMARY KEY,
  CONSTRAINT FK_ADMIN_EMPLEADO FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO)
);

-- VENDEDOR (subtipo de EMPLEADO)
CREATE TABLE VENDEDOR (
  ID_EMPLEADO NUMBER(4) PRIMARY KEY,
  COMISION_VENTA NUMBER(5,2),
  CONSTRAINT FK_VEND_EMPLEADO FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO)
);

-- PRODUCTO
CREATE TABLE PRODUCTO (
  ID_PRODUCTO NUMBER(4) GENERATED BY DEFAULT AS IDENTITY,
  NOMBRE_PRODUCTO VARCHAR2(100) NOT NULL,
  PRECIO_UNITARIO NUMBER(10,2),
  ORIGEN_NACIONAL CHAR(1),
  STOCK_MINIMO NUMBER(3),
  ACTIVO CHAR(1),
  COD_MARCA NUMBER(3),
  COD_CATEGORIA NUMBER(3),
  COD_PROVEEDOR NUMBER(5),
  CONSTRAINT PK_PRODUCTO PRIMARY KEY (ID_PRODUCTO),
  CONSTRAINT FK_PROD_MARCA FOREIGN KEY (COD_MARCA) REFERENCES MARCA(ID_MARCA),
  CONSTRAINT FK_PROD_CATEGORIA FOREIGN KEY (COD_CATEGORIA) REFERENCES CATEGORIA(ID_CATEGORIA),
  CONSTRAINT FK_PROD_PROVEEDOR FOREIGN KEY (COD_PROVEEDOR) REFERENCES PROVEEDOR(ID_PROVEEDOR)
);

-- VENTA (empieza en 5050 e incrementa en 3)
CREATE TABLE VENTA (
  ID_VENTA NUMBER(4) GENERATED BY DEFAULT AS IDENTITY (START WITH 5050 INCREMENT BY 3),
  FECHA_VENTA DATE,
  TOTAL_VENTA NUMBER(10),
  COD_MPAGO NUMBER(3),
  COD_EMPLEADO NUMBER(4),
  CONSTRAINT PK_VENTA PRIMARY KEY (ID_VENTA),
  CONSTRAINT FK_VENTA_MPAGO FOREIGN KEY (COD_MPAGO) REFERENCES MEDIO_PAGO(ID_MPAGO),
  CONSTRAINT FK_VENTA_EMPLEADO FOREIGN KEY (COD_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO)
);

-- DETALLE_VENTA
CREATE TABLE DETALLE_VENTA (
  COD_VENTA NUMBER(4),
  COD_PRODUCTO NUMBER(4),
  CANTIDAD NUMBER(6),
  CONSTRAINT PK_DETALLE PRIMARY KEY (COD_VENTA, COD_PRODUCTO),
  CONSTRAINT FK_DET_VENTA FOREIGN KEY (COD_VENTA) REFERENCES VENTA(ID_VENTA),
  CONSTRAINT FK_DET_PROD FOREIGN KEY (COD_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO)
);


-------------------------------------------------------------------------------------------------
-- CASO 2 – Modificación del modelo (Reglas de negocio adicionales)

-- Sueldo base no puede ser inferior a $400.000
ALTER TABLE EMPLEADO
ADD CONSTRAINT CHK_EMPLEADO_SUELDO_MINIMO
CHECK (SUELDO_BASE >= 400000);

-- Comisión del vendedor debe estar entre 0 y 0.25
ALTER TABLE VENDEDOR
ADD CONSTRAINT CHK_VENDEDOR_COMISION
CHECK (COMISION_VENTA BETWEEN 0 AND 0.25);

-- Stock mínimo de productos debe ser al menos 3 unidades
ALTER TABLE PRODUCTO
ADD CONSTRAINT CHK_PRODUCTO_STOCK_MIN
CHECK (STOCK_MINIMO >= 3);

-- No permitir correos duplicados entre proveedores
ALTER TABLE PROVEEDOR
ADD CONSTRAINT UQ_PROVEEDOR_EMAIL
UNIQUE (EMAIL);

-- Cada marca debe tener nombre único
ALTER TABLE MARCA
ADD CONSTRAINT UQ_MARCA_NOMBRE
UNIQUE (NOMBRE_MARCA);

-- Las cantidades en el detalle de venta deben ser mayores o iguales a 1
ALTER TABLE DETALLE_VENTA
ADD CONSTRAINT CHK_DETALLE_CANTIDAD_POSITIVA
CHECK (CANTIDAD >= 1);


----------------------------------------------------------------------------------------------
-- CASO 3 – Inserción de datos en las tablas.

-- SECUENCIAS REQUERIDAS
-------------------------

-- SALUD: inicia en 2050 e incrementa en 10
CREATE SEQUENCE SEQ_SALUD START WITH 2050 INCREMENT BY 10;

-- EMPLEADO: inicia en 750 e incrementa en 3
CREATE SEQUENCE SEQ_EMPLEADO START WITH 750 INCREMENT BY 3;

-------------------------

-- POBLANDO TABLA REGION
--------------------
INSERT INTO REGION (NOM_REGION) VALUES ('Los Lagos');
INSERT INTO REGION (NOM_REGION) VALUES ('Los Ríos');

-- POBLANDO TABLA COMUNA
--------------------
INSERT INTO COMUNA (NOM_COMUNA, COD_REGION) VALUES ('Puerto Varas', 1);
INSERT INTO COMUNA (NOM_COMUNA, COD_REGION) VALUES ('Osorno', 1);
INSERT INTO COMUNA (NOM_COMUNA, COD_REGION) VALUES ('Valdivia', 2);

-- POBLANDO TABLA SALUD (usando secuencia)
---------------------
INSERT INTO SALUD (ID_SALUD, NOM_SALUD) VALUES (SEQ_SALUD.NEXTVAL, 'FONASA');
INSERT INTO SALUD (ID_SALUD, NOM_SALUD) VALUES (SEQ_SALUD.NEXTVAL, 'ISAPRE Banmédica');


-- POBLANDO TABLA AFP (usa identity desde 210)
--------------------
INSERT INTO AFP (NOM_AFP) VALUES ('AFP Habitat');
INSERT INTO AFP (NOM_AFP) VALUES ('AFP Provida');


-- POBLANDO TABLA MEDIO_PAGO
--------------------
INSERT INTO MEDIO_PAGO (ID_MPAGO, NOMBRE_MPAGO)
  VALUES (1, 'EFECTIVO');
INSERT INTO MEDIO_PAGO (ID_MPAGO, NOMBRE_MPAGO)
  VALUES (2, 'TARJETA');
INSERT INTO MEDIO_PAGO (ID_MPAGO, NOMBRE_MPAGO)
  VALUES (3, 'TRANSFERENCIA');


-- POBLANDO TABLA MARCA
------------------
INSERT INTO MARCA (NOMBRE_MARCA) VALUES ('Coca-Cola');
INSERT INTO MARCA (NOMBRE_MARCA) VALUES ('Colún');
INSERT INTO MARCA (NOMBRE_MARCA) VALUES ('Nestlé');

-- TABLA CATEGORIA
---------------------
INSERT INTO CATEGORIA (NOMBRE_CATEGORIA) VALUES ('Bebidas');
INSERT INTO CATEGORIA (NOMBRE_CATEGORIA) VALUES ('Lácteos');
INSERT INTO CATEGORIA (NOMBRE_CATEGORIA) VALUES ('Snacks');

-- TABLA PROVEEDOR
---------------------
INSERT INTO PROVEEDOR (NOMBRE_PROVEEDOR, RUT_PROVEEDOR, TELEFONO, EMAIL, DIRECCION, COD_COMUNA)
  VALUES ('Distribuidora Sur', '76123456-7', '652145789',
          'contacto@distribuidorasur.cl', 'Av. Los Heroes 245',
          (SELECT ID_COMUNA FROM COMUNA WHERE NOM_COMUNA = 'Puerto Varas'));

INSERT INTO PROVEEDOR (NOMBRE_PROVEEDOR, RUT_PROVEEDOR, TELEFONO, EMAIL, DIRECCION, COD_COMUNA)
  VALUES ('Comercial Andes', '77987654-3', '642875963',
          'ventas@comercialandes.cl', 'Ruta 5 Sur KM 1035',
          (SELECT ID_COMUNA FROM COMUNA WHERE NOM_COMUNA = 'Osorno'));
  
-----------------------
-- EMPLEADOS (usando secuencia SEQ_EMPLEADO)
---------------------------
INSERT INTO EMPLEADO (
  ID_EMPLEADO, RUT_EMPLEADO, NOMBRE_EMPLEADO, APELLIDO_PATERNO,
  APELLIDO_MATERNO, FECHA_CONTRATACION, SUELDO_BASE, BONO_JEFATURA,
  ACTIVO, TIPO_EMPLEADO, COD_SALUD, COD_AFP
) VALUES (
  SEQ_EMPLEADO.NEXTVAL, '18456789-0', 'Marta', 'Perez', 'Lagos',
  TO_DATE('2020-03-15','YYYY-MM-DD'), 800000, 100000, 'S', 'Administrativo',
  (SELECT ID_SALUD FROM SALUD WHERE NOM_SALUD = 'FONASA'),
  (SELECT ID_AFP FROM AFP WHERE NOM_AFP = 'AFP Habitat')
);

INSERT INTO EMPLEADO (
  ID_EMPLEADO, RUT_EMPLEADO, NOMBRE_EMPLEADO, APELLIDO_PATERNO,
  APELLIDO_MATERNO, FECHA_CONTRATACION, SUELDO_BASE, BONO_JEFATURA,
  ACTIVO, TIPO_EMPLEADO, COD_SALUD, COD_AFP, COD_EMPLEADO
) VALUES (
  SEQ_EMPLEADO.NEXTVAL, '19567888-5', 'Pedro', 'Soto', 'Navarro',
  TO_DATE('2021-08-10','YYYY-MM-DD'), 550000, NULL, 'S', 'Vendedor',
  (SELECT ID_SALUD FROM SALUD WHERE NOM_SALUD = 'ISAPRE Banmédica'),
  (SELECT ID_AFP FROM AFP WHERE NOM_AFP = 'AFP Provida'),
  (SELECT ID_EMPLEADO FROM EMPLEADO WHERE NOMBRE_EMPLEADO = 'Marta')
);

INSERT INTO EMPLEADO (
  ID_EMPLEADO, RUT_EMPLEADO, NOMBRE_EMPLEADO, APELLIDO_PATERNO,
  APELLIDO_MATERNO, FECHA_CONTRATACION, SUELDO_BASE, BONO_JEFATURA,
  ACTIVO, TIPO_EMPLEADO, COD_SALUD, COD_AFP, COD_EMPLEADO
) VALUES (
  SEQ_EMPLEADO.NEXTVAL, '20654777-2', 'Ana', 'Muñoz', 'Caro',
  TO_DATE('2022-05-01','YYYY-MM-DD'), 620000, NULL, 'S', 'Vendedor',
  (SELECT ID_SALUD FROM SALUD WHERE NOM_SALUD = 'ISAPRE Banmédica'),
  (SELECT ID_AFP FROM AFP WHERE NOM_AFP = 'AFP Provida'),
  (SELECT ID_EMPLEADO FROM EMPLEADO WHERE NOMBRE_EMPLEADO = 'Marta')
);

-- SUBTIPOS DE EMPLEADO
---------------
INSERT INTO ADMINISTRATIVO (ID_EMPLEADO)
  VALUES ((SELECT ID_EMPLEADO FROM EMPLEADO WHERE NOMBRE_EMPLEADO = 'Marta'));

INSERT INTO VENDEDOR (ID_EMPLEADO, COMISION_VENTA)
  VALUES ((SELECT ID_EMPLEADO FROM EMPLEADO WHERE NOMBRE_EMPLEADO = 'Pedro'), 0.15);

INSERT INTO VENDEDOR (ID_EMPLEADO, COMISION_VENTA)
  VALUES ((SELECT ID_EMPLEADO FROM EMPLEADO WHERE NOMBRE_EMPLEADO = 'Ana'), 0.20);
  
-- PRODUCTOS
-----------------
INSERT INTO PRODUCTO (
  NOMBRE_PRODUCTO,
  PRECIO_UNITARIO,
  ORIGEN_NACIONAL,
  STOCK_MINIMO,
  ACTIVO,
  COD_MARCA,
  COD_CATEGORIA,
  COD_PROVEEDOR
) VALUES (
  'Leche Entera 1L',
  1200,
  'S',
  10,
  'S',
  (SELECT ID_MARCA FROM MARCA WHERE NOMBRE_MARCA = 'Colún'),
  (SELECT ID_CATEGORIA FROM CATEGORIA WHERE NOMBRE_CATEGORIA = 'Lácteos'),
  (SELECT ID_PROVEEDOR FROM PROVEEDOR WHERE NOMBRE_PROVEEDOR = 'Distribuidora Sur')
);

INSERT INTO PRODUCTO (
  NOMBRE_PRODUCTO,
  PRECIO_UNITARIO,
  ORIGEN_NACIONAL,
  STOCK_MINIMO,
  ACTIVO,
  COD_MARCA,
  COD_CATEGORIA,
  COD_PROVEEDOR
) VALUES (
  'Coca-Cola 1.5L',
  1500,
  'N',
  8,
  'S',
  (SELECT ID_MARCA FROM MARCA WHERE NOMBRE_MARCA = 'Coca-Cola'),
  (SELECT ID_CATEGORIA FROM CATEGORIA WHERE NOMBRE_CATEGORIA = 'Bebidas'),
  (SELECT ID_PROVEEDOR FROM PROVEEDOR WHERE NOMBRE_PROVEEDOR = 'Distribuidora Sur')
);

INSERT INTO PRODUCTO (
  NOMBRE_PRODUCTO,
  PRECIO_UNITARIO,
  ORIGEN_NACIONAL,
  STOCK_MINIMO,
  ACTIVO,
  COD_MARCA,
  COD_CATEGORIA,
  COD_PROVEEDOR
) VALUES (
  'Chocolate Milo',
  1000,
  'N',
  5,
  'S',
  (SELECT ID_MARCA FROM MARCA WHERE NOMBRE_MARCA = 'Nestlé'),
  (SELECT ID_CATEGORIA FROM CATEGORIA WHERE NOMBRE_CATEGORIA = 'Snacks'),
  (SELECT ID_PROVEEDOR FROM PROVEEDOR WHERE NOMBRE_PROVEEDOR = 'Comercial Andes')
);

-- VENTAS
-------------
INSERT INTO VENTA (FECHA_VENTA, TOTAL_VENTA, COD_MPAGO, COD_EMPLEADO)
  VALUES (TO_DATE('2025-10-01','YYYY-MM-DD'), 2700, 1,
          (SELECT ID_EMPLEADO FROM EMPLEADO WHERE NOMBRE_EMPLEADO = 'Pedro'));

INSERT INTO VENTA (FECHA_VENTA, TOTAL_VENTA, COD_MPAGO, COD_EMPLEADO)
  VALUES (TO_DATE('2025-10-02','YYYY-MM-DD'), 3700, 2,
          (SELECT ID_EMPLEADO FROM EMPLEADO WHERE NOMBRE_EMPLEADO = 'Ana'));

-- DETALLE_VENTA
--------------------
INSERT INTO DETALLE_VENTA (COD_VENTA, COD_PRODUCTO, CANTIDAD)
  VALUES (
    (SELECT ID_VENTA FROM VENTA WHERE TOTAL_VENTA = 2700),
    (SELECT ID_PRODUCTO FROM PRODUCTO WHERE NOMBRE_PRODUCTO = 'Leche Entera 1L'),
    1
  );

INSERT INTO DETALLE_VENTA (COD_VENTA, COD_PRODUCTO, CANTIDAD)
  VALUES (
    (SELECT ID_VENTA FROM VENTA WHERE TOTAL_VENTA = 2700),
    (SELECT ID_PRODUCTO FROM PRODUCTO WHERE NOMBRE_PRODUCTO = 'Coca-Cola 1.5L'),
    1
  );

INSERT INTO DETALLE_VENTA (COD_VENTA, COD_PRODUCTO, CANTIDAD)
  VALUES (
    (SELECT ID_VENTA FROM VENTA WHERE TOTAL_VENTA = 3700),
    (SELECT ID_PRODUCTO FROM PRODUCTO WHERE NOMBRE_PRODUCTO = 'Chocolate Milo'),
    2
  );
  
  
---------------------------------------------------------------------------------------
-- CASO 4 – RECUPERACIÓN DE DATOS

--  INFORME 1: Simulación de sueldo total estimado

SELECT
  e.ID_EMPLEADO AS "IDENTIFICADOR",
  e.NOMBRE_EMPLEADO || ' ' || e.APELLIDO_PATERNO || ' ' || e.APELLIDO_MATERNO AS "NOMBRE COMPLETO",
  e.SUELDO_BASE AS "SALARIO",
  e.BONO_JEFATURA AS "BONIFICACION",
  (e.SUELDO_BASE + e.BONO_JEFATURA) AS "SALARIO SIMULADO"
FROM EMPLEADO e
WHERE e.ACTIVO = 'S'
  AND e.BONO_JEFATURA IS NOT NULL
ORDER BY
  (e.SUELDO_BASE + e.BONO_JEFATURA) DESC,
  e.APELLIDO_PATERNO DESC;
  


  
--  INFORME 2: Simulación de sueldos con aumento 

SELECT
  e.NOMBRE_EMPLEADO || ' ' || e.APELLIDO_PATERNO || ' ' || e.APELLIDO_MATERNO AS "EMPLEADO",
  e.SUELDO_BASE AS "SUELDO",
  (e.SUELDO_BASE * 0.08) AS "POSIBLE AUMENTO",
  (e.SUELDO_BASE * 1.08) AS "SUELDO SIMULADO"
FROM EMPLEADO e
WHERE e.SUELDO_BASE BETWEEN 550000 AND 800000
ORDER BY e.SUELDO_BASE ASC;
